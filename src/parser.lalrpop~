use std::str::FromStr;
use binaryoperation::{BinaryOperation, BinaryOp};
use ast_executor::AstExecutor;

grammar;

pub Stmts: Vec<Box<AstExecutor>> = {
    Stmt => vec![<>],
    <l:Stmts> <r:Stmt> => {
    	let mut result: Vec<Box<AstExecutor>> = vec![];
	result.extend(l);
	result.push(r);
	result
    }
};

Stmt: Box<AstExecutor> = {
    <e:Expr> ";" => e
};

Expr: Box<AstExecutor> = {
    Expr ExprOp Factor =>
    	 Box::new(BinaryOperation::new(<>)),
    Factor
};

ExprOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub
};

Factor: Box<AstExecutor> = {
    Factor FactorOp Term =>
    	 Box::new(BinaryOperation::new(<>)),
    Term
};

FactorOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod
};

Term: Box<AstExecutor> = {
    Num => Box::new(<>),
    "(" <Expr> ")"
};

Num: i32 = {
     r"-?[0-9]+" => i32::from_str(<>).unwrap()
};
